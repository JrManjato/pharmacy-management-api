openapi: 3.0.3
info:
  version: '1.0'
  title: Pharmacy management API
  description: |
    _Api for managing a pharmacy._
servers:
  - url: 'https://api-dev.pharmacy.mg'

security:
  - BearerAuth: [ ]

paths:
  '/whoami':
    get:
      tags:
        - Security
      summary: Who am I? Tells you who you are.
      operationId: whoami
      responses:
        '200':
          description: Who you are
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  '/ping':
    get:
      tags:
        - Security
      summary: pong
      operationId: ping
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  '/admission':
    get:
      tags:
        - Admission
      summary: Get list of admissions
      operationId: GetAdmission
      responses:
        '200':
          description: List of admissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admission'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Admission
      summary: Add a new admission
      operationId: addAdmission
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                admission_name:
                  type: string
                  example: "string"
      responses:
        200:
          description: Admission successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_admission:
                    type: integer
                    example: 10
                  admission_name:
                    type: string
                    example: "string"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - Admission
      summary: Update existing admission
      description: Update admission when `id` are provided.
      operationId: UpdateAdmission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Admission'
      responses:
        '200':
          description: The updated admissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admission'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  '/treatment':
    get:
      tags:
        - Treatment
      summary: Get list of treatments
      operationId: GetTreatment
      responses:
        '200':
          description: The list of symptoms treated by the medicine.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Treatment'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Treatment
      summary: Add a new treatment
      operationId: addTreatment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                treatment_name:
                  type: string
                  example: "string"
      responses:
        200:
          description: Treatment successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_treatment:
                    type: integer
                    example: 10
                  treatment_name:
                    type: string
                    example: "string"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - Treatment
      summary: Update existing treatment
      description: Update treatment when `id` are provided.
      operationId: UpdateTreatment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Treatment'
      responses:
        '200':
          description: The updated treatments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Treatment'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  '/compartment':
    get:
      tags:
        - Compartment
      summary: Get list of compartments
      operationId: GetCompartments
      responses:
        '200':
          description: List of compartments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Compartment'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Compartment
      summary: Add a new compartment
      operationId: addCompartment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                compartment_name:
                  type: string
                  example: "C10"
      responses:
        200:
          description: Compartment successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_compartment:
                    type: integer
                    example: 10
                  compartment_name:
                    type: string
                    example: "C10"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - Compartment
      summary: Update existing compartment
      description: Update compartment when `id` are provided.
      operationId: UpdateCompartment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Compartment'
      responses:
        '200':
          description: The Updated compartments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Compartment'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  '/compartment/{id}':
    delete:
      tags:
        - Compartment
      summary: Delete compartment by id
      description: Remove a specific compartment from the list
      parameters:
        - name: id
          in: path
          schema:
            type: number
            example: 12
          required: true
      responses:
        200:
          description: Compartment deleted
          content:
            text/plain:
              example: Compartment deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:   
                 $ref: '#/components/responses/400'
  '/medicines':
    get:
      tags:
        - Medicine
      summary: Get list of medicines
      operationId: GetMedicines
      responses:
        '200':
          description: List of medicines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Medicine
      summary: Add a new medicine
      operationId: addMedicine
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                medicine_name:
                  type: string
                  example: "string"
      responses:
        200:
          description: Medicine successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_medicine:
                    type: integer
                    example: 110
                  medicine_name:
                    type: string
                    example: "string"
        400:
          $ref: "#/components/responses/400"
    put:
      tags:
        - Medicine
      summary: Update existing medicines
      description: Update medicines when `id` are provided.
      operationId: UpdateMedicine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateMedicine'
      responses:
        '200':
          description: The updated medicines
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Medicine'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'       
  '/medicines/{id}':
    get:
      tags:
        - Medicine
      summary: Get medicine by identifier
      parameters:
       - name: id
         in: path
         required: true
         schema:
          type: string
      operationId: getMedicineById
      responses:
          '200':
            description: The identified medicine
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Medicine'
          '400':
            $ref: '#/components/responses/400'
          '403':
            $ref: '#/components/responses/403'
          '404':
            $ref: '#/components/responses/404'
          '429':
            $ref: '#/components/responses/429'
          '500':
            $ref: '#/components/responses/500'
    delete:
      tags:
        - Medicine
      summary: Delete medicine by id
      description: Remove a specific medicine from the list
      parameters:
        - name: id
          in: path
          schema:
            type: number
            example: 12
          required: true
      responses:
        200:
          description: Medicine deleted
          content:
            text/plain:
              example: Medicine deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:   
                 $ref: '#/components/responses/400'
  /medicines/treatment/{id_treatment}/admission/{id_admission}:
    get:
      tags:
        - Classification
      summary: Get medicine according to their treatment and their admission
      parameters:
        - name: id_admission
          in: path
          required: true
          schema:
            type: number
        - name: id_treatment
          in: path
          required: true
          schema:
            type: number
      operationId: getMedicineTreatmentByAdmission
      responses:
        '200':
          description: List of medicines according to their treatment and their admission
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /medicines/treatment/{id_treatment}:
    get:
      tags:
        - Classification
      summary: Get medicines according to their treatment
      parameters:
        - name: id_treatment
          in: path
          required: true
          schema:
            type: number
      operationId: getMedicineByTreatment
      responses:
        '200':
          description: List of Medicine according to their treatment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /medicines/compartment/{id_compartment}:
    get:
      tags:
        - Classification
      summary: Get the list of medicines in a compartment
      parameters:
        - name: id_compartment
          in: path
          required: true
          schema:
            type: number
      operationId: getMedicineByCompartment
      responses:
        '200':
          description: List of Medicine according to their treatment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    Whoami:
      properties:
        id:
          type: string
        role:
          type: string
          enum:
            - CUSTOMER
            - MANAGER
    Medicine:
      properties:
        id_medicine:
          type: number
          example: 1
        medicine_name:
          type: string
          example: "azithromycine"
        treatment:
          type: array
          items: 
            $ref: '#/components/schemas/Treatment'
        admission:
          $ref: '#/components/schemas/Admission'
        compartment:
          $ref: '#/components/schemas/Compartment'
        quantity:
          type: number
          example: 500
    CreateMedicine:
      properties:
        id_medicine:
          type: number
          example: 1
        medicine_name:
          type: string
          example: "azithromycine"
        id_admission:
          type: number
          example: 1
        quantity:
          type: number
          example: 500
        id_treatment:
          type: number
          example: 1
    Treatment:
      properties:
        id_treatment:
          type: number
          example: 1
        treatment_name:
          type: string
          example: "headache"
    Admission:
      properties:
        id_admission:
          type: number
          example: 1
        admission_name:
          type: string
          example: "oral"
    Compartment:
      properties:
        id_compartment:
          type: number
          example: 1
        compartment_name:
          type: string
          example: "C1"
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
